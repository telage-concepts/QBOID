@page
@model IndexModel
@using QBOID.Models


@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <h1 class="display-4">Take a loan</h1>

</div>

<div class="row col-md-12">
    <div class="col-md-9">
        <form id="loanform" method="post">
            <div class="form-group">
                <label class="control-label">E-mail: </label>
                <input asp-for="Loan.Email" id="email" class="form-control">
                <span asp-validation-for="Loan.Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Phone Number: </label>
                <input asp-for="Loan.PhoneNumber" id="PhoneNumber" class="form-control">
                <span asp-validation-for="Loan.PhoneNumber" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Bank Verification Number: </label>
                <input asp-for="Loan.BankVerificationNumber" id="BVN" class="form-control">
                <span asp-validation-for="Loan.BankVerificationNumber" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Bank Code: </label>
                <input asp-for="Loan.BankCode" id="BankCode" class="form-control" value="200">
                <span asp-validation-for="Loan.BankCode" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Bank Account Number: </label>
                <input asp-for="Loan.BankAccountNumber" id="BankAccountNumber" class="form-control">
                <span asp-validation-for="Loan.BankAccountNumber" class="text-danger"></span>
            </div>


            <div class="form-group" action="action" method="GET">
                <label class="control-label">Employer Sector: </label>
                <select asp-for="Loan.EmployerRecord!.EmployerSector" 
                asp-items="Html.GetEnumSelectList<EmployerSector>()" id="EmployerSector" class="form-control"></select>
                <span asp-validation-for="Loan.EmployerRecord!.EmployerSector" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Employment Type: </label>
                <select asp-for="Loan.EmployerRecord!.EmploymentType" 
                asp-items="Html.GetEnumSelectList<EmploymentType>()" id="EmploymentType" class="form-control"></select>
                <span asp-validation-for="Loan.EmployerRecord!.EmploymentType" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Employer: </label>
                <input asp-for="Loan.EmployerRecord!.EmployerName" id="EmployerName" class="form-control">
                <span asp-validation-for="Loan.EmployerRecord!.EmployerName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Employer Address: </label>
                <input asp-for="Loan.EmployerRecord!.EmployerAddress" id="EmployerAddress" class="form-control">
                <span asp-validation-for="Loan.EmployerRecord!.EmployerAddress" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">City: </label>
                <input asp-for="Loan.EmployerRecord!.City" id="EmployerCity" class="form-control">
                <span asp-validation-for="Loan.EmployerRecord!.City" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">State: </label>
                <input asp-for="Loan.EmployerRecord!.State" id="EmployerState" class="form-control">
                <span asp-validation-for="Loan.EmployerRecord!.State" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Employer Phone Number: </label>
                <input asp-for="Loan.EmployerRecord!.EmployerPhone" id="EmployerPhoneNumber" class="form-control">
                <span asp-validation-for="Loan.EmployerRecord!.EmployerPhone" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Employment Date: </label>
                <input asp-for="Loan.EmployerRecord!.EmploymentDate" id="EmploymentDate" class="form-control">
                <span asp-validation-for="Loan.EmployerRecord!.EmploymentDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Net Monthly Income: </label>
                <input asp-for="Loan.EmployerRecord!.NetMonthlyIncome" id="NetMonthlyIncome" class="form-control">
                <span asp-validation-for="Loan.EmployerRecord!.NetMonthlyIncome" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Employment Duration: </label>
                <select asp-for="Loan.EmployerRecord!.EmploymentDuration" 
                asp-items="Html.GetEnumSelectList<EmploymentLength>()" id="EmploymentDuration" class="form-control"></select>
                <span asp-validation-for="Loan.EmployerRecord!.EmploymentDuration" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Next Payday: </label>
                <input asp-for="Loan.EmployerRecord!.NextPayDay" id="NextPayDay" class="form-control">
                <span asp-validation-for="Loan.EmployerRecord!.EmploymentDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Tolerance Days: </label>
                <input asp-for="Loan.EmployerRecord!.ToleranceDays" id="ToleranceDays" class="form-control">
                <span asp-validation-for="Loan.EmployerRecord!.ToleranceDays" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Total Monthly Expense: </label>
                <input asp-for="Loan.EmployerRecord!.TotalMonthlyExpense" id="TotalMonthlyExpense" class="form-control">
                <span asp-validation-for="Loan.EmployerRecord!.TotalMonthlyExpense" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Salary Frequency: </label>
                <select asp-for="Loan.EmployerRecord!.SalaryFrequency" 
                asp-items="Html.GetEnumSelectList<PayFrequency>()" id="SalaryFrequency" class="form-control"></select>
                <span asp-validation-for="Loan.EmployerRecord!.SalaryFrequency" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label class="control-label">Income Receipt Mode: </label>
                <select asp-for="Loan.EmployerRecord!.IncomeReceiptMode" 
                asp-items="Html.GetEnumSelectList<IncomeReceiptMode>()" id="IncomeReceiptMode" class="form-control"></select>
                <span asp-validation-for="Loan.EmployerRecord!.IncomeReceiptMode" class="text-danger"></span>
            </div>

            <input type="submit" value="Submit" id="submit">
    </form>
    </div>
</div>
@section Scripts{
            <script src="https://devembed.azurewebsites.net/embed/js" type="text/javascript"></script>
            @* <script>
                EmailInput = document.getElementById('email');
                PhoneNumberInput = document.getElementById('PhoneNumber');
                BvnInput = document.getElementById('BVN');
                BankCodeInput = document.getElementById('BankCode');
                BankAccountNumberInput = document.getElementById('BankAccountNumber');
                SectorInput = document.getElementById('EmployerSector');
                EmploymentTypeInput = document.getElementById('EmploymentType');
                EmployerNameInput = document.getElementById('EmployerName');
                EmployerAddressInput = document.getElementById('EmployerAddress');
                EmployerCityInput = document.getElementById('EmployerCity');
                EmployerStateInput = document.getElementById('EmployerState');
                EmployerPhoneInput = document.getElementById('EmployerPhoneNumber');
                EmploymentDateInput = document.getElementById('EmploymentDate');
                NetMonthlyIncomeInput = document.getElementById('NetMonthlyIncome');
                EmploymentDurationInput = document.getElementById("EmploymentDuration");
                NextPayDayInput = document.getElementById("NextPayDay");
                ToleranceDaysInput = document.getElementById("ToleranceDays");
                TotalMonthlyExpenseInput = document.getElementById("TotalMonthlyExpense");
                SalaryFrequencyInput = document.getElementById("SalaryFrequency");
                IncomeReceiptModeInput = document.getElementById("IncomeReceiptMode");

                var data= {
                        email: EmailInput.value,
                        phoneNumber: PhoneNumberInput.value,
                        bvn: BvnInput.value,
                        apiKey: "@Model.apiKey",
                        authorisation:  '@ViewData["Authorisation"]',
                        requestKey: "@Model.requestKey",
                        loanId: "@Guid.NewGuid().ToString()",
                        bankCode: BankCodeInput.value,
                        BankAccountNumber: BankAccountNumberInput.value,
                        employmentRecord: {
                            sector: SectorInput.value,
                            employmentType: EmploymentTypeInput.value,
                            employerName : EmployerNameInput.value,
                            employerAddress : EmployerAddressInput.value,
                            city : EmployerCityInput.value,
                            state : EmployerStateInput.value,
                            employerPhone : EmployerPhoneInput.value,
                            employmentDate : EmploymentDateInput.value,
                            netMonthlyIncome : NetMonthlyIncomeInput.value,
                            duration : EmploymentDurationInput.value,
                            nextPayDay: NextPayDayInput.value,
                            toleranceDays: ToleranceDaysInput.value,
                            totalMonthlyExpense: TotalMonthlyExpenseInput.value,
                            salaryFrequency: SalaryFrequencyInput.value,
                            incomeReceiptMode: IncomeReceiptModeInput.value}
                }

                EmailInput.addEventListener("change", () => {
                    data.email = EmailInput.value;
                });
                PhoneNumberInput.addEventListener("change", () => {
                    data.phoneNumber = PhoneNumberInput.value;
                });
                BvnInput.addEventListener("change", () => {
                    data.bvn = BvnInput.value;
                });
                BankCodeInput.addEventListener("change", () => {
                    data.bankCode = BankCodeInput.value;
                });
                BankAccountNumberInput.addEventListener("change", () => {
                    data.BankAccountNumber = BankAccountNumberInput.value;
                });
                SectorInput.addEventListener("change", () => {
                    data.employmentRecord.sector = SectorInput.value;
                });
                EmploymentTypeInput.addEventListener("change", () => {
                    data.employmentRecord.employmentType = EmploymentTypeInput.value;
                });
                EmployerNameInput.addEventListener("change", () => {
                    data.employmentRecord.employerName = EmployerNameInput.value;
                });
                EmployerAddressInput.addEventListener("change", () => {
                    data.employmentRecord.employerAddress = EmployerAddressInput.value;
                });
                EmployerCityInput.addEventListener("change", () => {
                    data.employmentRecord.city = EmployerCityInput.value;
                });
                EmployerStateInput.addEventListener("change", () => {
                    data.employmentRecord.state = EmployerStateInput.value;
                });
                EmployerPhoneInput.addEventListener("change", () => {
                    data.employmentRecord.employerPhone = EmployerPhoneInput.value;
                });
                EmploymentDateInput.addEventListener("change", () => {
                    data.employmentRecord.employmentDate = EmploymentDateInput.value;
                });
                NetMonthlyIncomeInput.addEventListener("change", () => {
                    data.employmentRecord.netMonthlyIncome = NetMonthlyIncomeInput.value;
                });
                EmploymentDurationInput.addEventListener("change", () => {
                    data.employmentRecord.duration = EmploymentDurationInput.value;
                });
                NextPayDayInput.addEventListener("change", () => {
                    data.employmentRecord.nextPayDay = NextPayDayInput.value;
                });
                ToleranceDaysInput.addEventListener("change", () => {
                    data.employmentRecord.toleranceDays = ToleranceDaysInput.value;
                });
                TotalMonthlyExpenseInput.addEventListener("change", () => {
                    data.employmentRecord.totalMonthlyExpense = TotalMonthlyExpenseInput.value;
                });
                SalaryFrequencyInput.addEventListener("change", () => {
                    data.employmentRecord.salaryFrequency = SalaryFrequencyInput.value;
                });
                IncomeReceiptModeInput.addEventListener("change", () => {
                    data.employmentRecord.incomeReceiptMode = IncomeReceiptModeInput.value;
                });
            
                loadMimEmbedded('submit', data);
            </script> *@
    }